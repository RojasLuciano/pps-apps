{"version":3,"sources":["index.ts"],"names":["QrCodeType","QrCodeAddressType","QrCodeEmailType","QrCodePhoneType","QrCodeWifiType","scanQRCodes","frame","__scanQRCodes"],"mappings":";;;;;;;;AAEA;AACA;AACA;IACYA,U;AAgBZ;AACA;AACA;;;;WAlBYA,U;AAAAA,EAAAA,U,CAAAA,U;AAAAA,EAAAA,U,CAAAA,U;AAAAA,EAAAA,U,CAAAA,U;AAAAA,EAAAA,U,CAAAA,U;AAAAA,EAAAA,U,CAAAA,U;AAAAA,EAAAA,U,CAAAA,U;AAAAA,EAAAA,U,CAAAA,U;AAAAA,EAAAA,U,CAAAA,U;AAAAA,EAAAA,U,CAAAA,U;AAAAA,EAAAA,U,CAAAA,U;AAAAA,EAAAA,U,CAAAA,U;AAAAA,EAAAA,U,CAAAA,U;AAAAA,EAAAA,U,CAAAA,U;GAAAA,U,0BAAAA,U;;IAmBAC,iB;AAMZ;AACA;AACA;;;;WARYA,iB;AAAAA,EAAAA,iB,CAAAA,iB;AAAAA,EAAAA,iB,CAAAA,iB;AAAAA,EAAAA,iB,CAAAA,iB;GAAAA,iB,iCAAAA,iB;;AAwCZ;AACA;AACA;IACYC,e;AAMZ;AACA;AACA;;;;WARYA,e;AAAAA,EAAAA,e,CAAAA,e;AAAAA,EAAAA,e,CAAAA,e;AAAAA,EAAAA,e,CAAAA,e;GAAAA,e,+BAAAA,e;;AAgBZ;AACA;AACA;IACYC,e;AAQZ;AACA;AACA;;;;WAVYA,e;AAAAA,EAAAA,e,CAAAA,e;AAAAA,EAAAA,e,CAAAA,e;AAAAA,EAAAA,e,CAAAA,e;AAAAA,EAAAA,e,CAAAA,e;AAAAA,EAAAA,e,CAAAA,e;GAAAA,e,+BAAAA,e;;AAgCZ;AACA;AACA;IACYC,c;AAMZ;AACA;AACA;;;;WARYA,c;AAAAA,EAAAA,c,CAAAA,c;AAAAA,EAAAA,c,CAAAA,c;AAAAA,EAAAA,c,CAAAA,c;GAAAA,c,8BAAAA,c;;AA2IZ;AACA;AACA;AACO,SAASC,WAAT,CAAqBC,KAArB,EAA6C;AAClD,YADkD,CAElD;AACA;;AACA,SAAOC,aAAa,CAACD,KAAD,CAApB;AACD","sourcesContent":["import type { Frame } from 'react-native-vision-camera';\n\n/**\n * @see https://developers.google.com/android/reference/com/google/mlkit/vision/barcode/Barcode.BarcodeValueType\n */\nexport enum QrCodeType {\n  UNKNOWN = 0,\n  CONTACT_INFO = 1,\n  EMAIL = 2,\n  ISBN = 3,\n  PHONE = 4,\n  PRODUCT = 5,\n  SMS = 6,\n  TEXT = 7,\n  URL = 8,\n  WIFI = 9,\n  GEO = 10,\n  CALENDAR_EVENT = 11,\n  DRIVER_LICENSE = 12,\n}\n\n/**\n * @see https://developers.google.com/android/reference/com/google/mlkit/vision/barcode/Barcode.Address.AddressType\n */\nexport enum QrCodeAddressType {\n  UNKNOWN = 0,\n  WORK = 1,\n  HOME = 2,\n}\n\n/**\n * @see https://developers.google.com/android/reference/com/google/mlkit/vision/barcode/Barcode.Address\n */\nexport interface QrCodeAddress {\n  addressLines?: string[];\n  type?: QrCodeAddressType;\n}\n\n/**\n * @see https://developers.google.com/android/reference/com/google/mlkit/vision/barcode/Barcode.PersonName\n */\nexport interface QrCodePersonName {\n  first?: string;\n  formattedName?: string;\n  last?: string;\n  middle?: string;\n  prefix?: string;\n  pronunciation?: string;\n  suffix?: string;\n}\n\n/**\n * @see https://developers.google.com/android/reference/com/google/mlkit/vision/barcode/Barcode.ContactInfo\n */\nexport interface QrCodeContactInfo {\n  addresses?: QrCodeAddress[];\n  emails?: QrCodeEmail[];\n  name?: QrCodePersonName;\n  organization?: string;\n  phones?: QrCodePhone[];\n  title?: string;\n  urls?: string[];\n}\n\n/**\n * @see https://developers.google.com/android/reference/com/google/mlkit/vision/barcode/Barcode.Email.FormatType\n */\nexport enum QrCodeEmailType {\n  UNKNOWN = 0,\n  WORK = 1,\n  HOME = 2,\n}\n\n/**\n * @see https://developers.google.com/android/reference/com/google/mlkit/vision/barcode/Barcode.Email\n */\nexport interface QrCodeEmail {\n  address?: string;\n  body?: string;\n  subject?: string;\n  type?: QrCodeEmailType;\n}\n\n/**\n * @see https://developers.google.com/android/reference/com/google/mlkit/vision/barcode/Barcode.Phone.FormatType\n */\nexport enum QrCodePhoneType {\n  UNKNOWN = 0,\n  WORK = 1,\n  HOME = 2,\n  FAX = 3,\n  MOBILE = 4,\n}\n\n/**\n * @see https://developers.google.com/android/reference/com/google/mlkit/vision/barcode/Barcode.Phone\n */\nexport interface QrCodePhone {\n  number?: string;\n  type?: QrCodePhoneType;\n}\n\n/**\n * @see https://developers.google.com/android/reference/com/google/mlkit/vision/barcode/Barcode.Sms\n */\nexport interface QrCodeSms {\n  message?: string;\n  phoneNumber?: string;\n}\n\n/**\n * @see https://developers.google.com/android/reference/com/google/mlkit/vision/barcode/Barcode.UrlBookmark\n */\nexport interface QrCodeUrl {\n  title?: string;\n  url?: string;\n}\n\n/**\n * @see https://developers.google.com/android/reference/com/google/mlkit/vision/barcode/Barcode.WiFi.EncryptionType\n */\nexport enum QrCodeWifiType {\n  OPEN = 1,\n  WPA = 2,\n  WEP = 3,\n}\n\n/**\n * @see https://developers.google.com/android/reference/com/google/mlkit/vision/barcode/Barcode.WiFi\n */\nexport interface QrCodeWifi {\n  encryptionType?: QrCodeWifiType;\n  password?: string;\n  ssid?: string;\n}\n\n/**\n * @see https://developers.google.com/android/reference/com/google/mlkit/vision/barcode/Barcode.GeoPoint\n */\nexport interface QrCodeGeoPoint {\n  lat?: number;\n  lng?: number;\n}\n\n/**\n * @see https://developers.google.com/android/reference/com/google/mlkit/vision/barcode/Barcode.CalendarDateTime\n */\nexport interface QrCodeDate {\n  day: number;\n  hours: number;\n  minutes: number;\n  month: number;\n  rawValue: string;\n  seconds: number;\n  year: number;\n  isUtc: boolean;\n}\n\n/**\n * @see https://developers.google.com/android/reference/com/google/mlkit/vision/barcode/Barcode.CalendarEvent\n */\nexport interface QrCodeCalendarEvent {\n  description?: string;\n  end?: QrCodeDate;\n  location?: string;\n  organizer?: string;\n  start?: QrCodeDate;\n  status?: string;\n  summary?: string;\n}\n\n/**\n * @see https://developers.google.com/android/reference/com/google/mlkit/vision/barcode/Barcode.DriverLicense\n */\nexport interface QrCodeDriverLicense {\n  addressCity?: string;\n  addressState?: string;\n  addressStreet?: string;\n  addressZip?: string;\n  birthDate?: string;\n  documentType?: string;\n  expiryDate?: string;\n  firstName?: string;\n  gender?: string;\n  issueDate?: string;\n  issuingCountry?: string;\n  lastName?: string;\n  licenseNumber?: string;\n  middleName?: string;\n}\n\n/**\n * @see https://developer.android.com/reference/android/graphics/Rect.html\n */\nexport interface Rect {\n  bottom: number;\n  left: number;\n  right: number;\n  top: number;\n}\n\n/**\n * @see https://developer.android.com/reference/android/graphics/Point.html\n */\nexport interface Point {\n  x: number;\n  y: number;\n}\n\n/**\n * @see https://developers.google.com/android/reference/com/google/mlkit/vision/barcode/Barcode\n */\nexport type QrCode = {\n  boundingBox?: Rect;\n  cornerPoints?: Point[];\n  displayValue?: string;\n  rawValue?: string;\n  content:\n    | {\n        type: QrCodeType.UNKNOWN | QrCodeType.ISBN | QrCodeType.TEXT;\n        data: string;\n      }\n    | {\n        type: QrCodeType.CONTACT_INFO;\n        data: QrCodeContactInfo;\n      }\n    | {\n        type: QrCodeType.EMAIL;\n        data: QrCodeEmail;\n      }\n    | {\n        type: QrCodeType.PHONE;\n        data: QrCodePhone;\n      }\n    | {\n        type: QrCodeType.SMS;\n        data: QrCodeSms;\n      }\n    | {\n        type: QrCodeType.URL;\n        data: QrCodeUrl;\n      }\n    | {\n        type: QrCodeType.WIFI;\n        data: QrCodeWifi;\n      }\n    | {\n        type: QrCodeType.GEO;\n        data: QrCodeGeoPoint;\n      }\n    | {\n        type: QrCodeType.CALENDAR_EVENT;\n        data: QrCodeCalendarEvent;\n      }\n    | {\n        type: QrCodeType.DRIVER_LICENSE;\n        data: QrCodeDriverLicense;\n      };\n};\n\n/**\n * Scans QR codes.\n */\nexport function scanQRCodes(frame: Frame): QrCode[] {\n  'worklet';\n  // @ts-ignore\n  // eslint-disable-next-line no-undef\n  return __scanQRCodes(frame);\n}\n"]}