"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.scanQRCodes = scanQRCodes;
exports.QrCodeWifiType = exports.QrCodePhoneType = exports.QrCodeEmailType = exports.QrCodeAddressType = exports.QrCodeType = void 0;

/**
 * @see https://developers.google.com/android/reference/com/google/mlkit/vision/barcode/Barcode.BarcodeValueType
 */
let QrCodeType;
/**
 * @see https://developers.google.com/android/reference/com/google/mlkit/vision/barcode/Barcode.Address.AddressType
 */

exports.QrCodeType = QrCodeType;

(function (QrCodeType) {
  QrCodeType[QrCodeType["UNKNOWN"] = 0] = "UNKNOWN";
  QrCodeType[QrCodeType["CONTACT_INFO"] = 1] = "CONTACT_INFO";
  QrCodeType[QrCodeType["EMAIL"] = 2] = "EMAIL";
  QrCodeType[QrCodeType["ISBN"] = 3] = "ISBN";
  QrCodeType[QrCodeType["PHONE"] = 4] = "PHONE";
  QrCodeType[QrCodeType["PRODUCT"] = 5] = "PRODUCT";
  QrCodeType[QrCodeType["SMS"] = 6] = "SMS";
  QrCodeType[QrCodeType["TEXT"] = 7] = "TEXT";
  QrCodeType[QrCodeType["URL"] = 8] = "URL";
  QrCodeType[QrCodeType["WIFI"] = 9] = "WIFI";
  QrCodeType[QrCodeType["GEO"] = 10] = "GEO";
  QrCodeType[QrCodeType["CALENDAR_EVENT"] = 11] = "CALENDAR_EVENT";
  QrCodeType[QrCodeType["DRIVER_LICENSE"] = 12] = "DRIVER_LICENSE";
})(QrCodeType || (exports.QrCodeType = QrCodeType = {}));

let QrCodeAddressType;
/**
 * @see https://developers.google.com/android/reference/com/google/mlkit/vision/barcode/Barcode.Address
 */

exports.QrCodeAddressType = QrCodeAddressType;

(function (QrCodeAddressType) {
  QrCodeAddressType[QrCodeAddressType["UNKNOWN"] = 0] = "UNKNOWN";
  QrCodeAddressType[QrCodeAddressType["WORK"] = 1] = "WORK";
  QrCodeAddressType[QrCodeAddressType["HOME"] = 2] = "HOME";
})(QrCodeAddressType || (exports.QrCodeAddressType = QrCodeAddressType = {}));

/**
 * @see https://developers.google.com/android/reference/com/google/mlkit/vision/barcode/Barcode.Email.FormatType
 */
let QrCodeEmailType;
/**
 * @see https://developers.google.com/android/reference/com/google/mlkit/vision/barcode/Barcode.Email
 */

exports.QrCodeEmailType = QrCodeEmailType;

(function (QrCodeEmailType) {
  QrCodeEmailType[QrCodeEmailType["UNKNOWN"] = 0] = "UNKNOWN";
  QrCodeEmailType[QrCodeEmailType["WORK"] = 1] = "WORK";
  QrCodeEmailType[QrCodeEmailType["HOME"] = 2] = "HOME";
})(QrCodeEmailType || (exports.QrCodeEmailType = QrCodeEmailType = {}));

/**
 * @see https://developers.google.com/android/reference/com/google/mlkit/vision/barcode/Barcode.Phone.FormatType
 */
let QrCodePhoneType;
/**
 * @see https://developers.google.com/android/reference/com/google/mlkit/vision/barcode/Barcode.Phone
 */

exports.QrCodePhoneType = QrCodePhoneType;

(function (QrCodePhoneType) {
  QrCodePhoneType[QrCodePhoneType["UNKNOWN"] = 0] = "UNKNOWN";
  QrCodePhoneType[QrCodePhoneType["WORK"] = 1] = "WORK";
  QrCodePhoneType[QrCodePhoneType["HOME"] = 2] = "HOME";
  QrCodePhoneType[QrCodePhoneType["FAX"] = 3] = "FAX";
  QrCodePhoneType[QrCodePhoneType["MOBILE"] = 4] = "MOBILE";
})(QrCodePhoneType || (exports.QrCodePhoneType = QrCodePhoneType = {}));

/**
 * @see https://developers.google.com/android/reference/com/google/mlkit/vision/barcode/Barcode.WiFi.EncryptionType
 */
let QrCodeWifiType;
/**
 * @see https://developers.google.com/android/reference/com/google/mlkit/vision/barcode/Barcode.WiFi
 */

exports.QrCodeWifiType = QrCodeWifiType;

(function (QrCodeWifiType) {
  QrCodeWifiType[QrCodeWifiType["OPEN"] = 1] = "OPEN";
  QrCodeWifiType[QrCodeWifiType["WPA"] = 2] = "WPA";
  QrCodeWifiType[QrCodeWifiType["WEP"] = 3] = "WEP";
})(QrCodeWifiType || (exports.QrCodeWifiType = QrCodeWifiType = {}));

/**
 * Scans QR codes.
 */
function scanQRCodes(frame) {
  'worklet'; // @ts-ignore
  // eslint-disable-next-line no-undef

  return __scanQRCodes(frame);
}
//# sourceMappingURL=index.js.map